import streamlit as st

from pathlib import Path
import google.generativeai as genai
from dotenv import load_dotenv
import pandas as pd
import numpy as np
import os
import sys
import time
from jobs_details import jobs_details as data
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# arquivo JSON https://jsoneditoronline.org/

# Configura a API para o modelo genai
# Obt√©m a chave da API da vari√°vel de ambiente
# no streamlit https://share.streamlit.io/ escolha o app / Settings / Secrets e guarde a chave API do Google
api_key = os.getenv("GEMINI_API_KEY")
#st.write(api_key)
genai.configure(api_key=api_key)

# Instru√ß√£o do sistema para o modelo generativo
system_instruction = f"""

Seu nome √© Sophia, um assistente virtual que ajuda o examinador de patentes da fase recursal a fazer seu exame de recurso de pedidos de patentes que foram indeferidos e est√£o na fase recursal no INPI. 

Procure ser objetivo, responda em poucos par√°grafos

Voce deve de in√≠cio perguntar que tipo de pergunta o examinador deseja fazer: uma pergunta gen√©rica sobre recurso ou uma pergunta sobre como escolher um modelo de parecer. Neste √∫ltimo caso sugerir o modelo de parecer mais prov√°vel a ser usado e o c√≥digo de despacho mais adequado.

Informa√ß√£o sobre as perguntas e respostas mais comuns em formato JSON: {data}

Neste arquivo JSON cada resposta tem associado um modelo de parecer e um c√≥digo de despacho.

Seu trabalho √© entender a pergunta do examinador e indicar a resposta em que aponta em linhas gerais como deve ser o exame de recurso feito pelo examinador. 

No caso de uma pergunta sobre a melhor escolha de um modelo de parecer, se necess√°rio pergunte sobre as raz√µes do indeferimento do pedido e se foi apresentado um novo quadro reivindicat√≥rio na peti√ß√£o de recurso e sugira qual o modelo de parecer e c√≥digo de despacho a ser aplicado no parecer, com base no arquivo JSON. 

No caso de uma pergunta sobre a melhor escolha de um modelo de parecer. O exame deve ser dividido em tr√™s etapas: A primeira etapa √© a verifica√ß√£o quanto a v√≠cios formais no indeferimento, por exemplo, se alguma peti√ß√£o do processo foi desconsiderada no indeferimento. Caso haja v√≠cios formais que causaram preju√≠zo ao requerente ent√£o o parecer deve ser os Modelos 1 ou 9 com Despacho 100.1 Recurso conhecido e provido para corre√ß√£o do v√≠cio formal. Anulado o indeferimento para retorno dos autos √† Primeira Inst√¢ncia. 

Caso n√£o tenha sido detectados v√≠cios formais siga para a segunda etapa relativa a detec√ß√£o de v√≠cios de julgamento. Se foi detectado algum v√≠cio de julgamento que leva a reverter a decis√£o de indeferimento avalie se √© o caso de aplicar o princ√≠pio de causa madura, ou seja, se todos os crit√©rios de patenteabilidade j√° foram avaliados no indeferimento. Em caso positivo use o Modeloo 3 e c√≥digo de despacho 100.3 Recurso conhecido e provido por v√≠cio de julgamento. Reformada a decis√£o recorrida e deferido o pedido. Caso contr√°rio, n√£o √© o caso de causa madura, ou seja, h√° outras quest√µes de patenteabilidade a serem avalisadas e que n√£o foram avalisadas na primeira inst√¢ncia, ent√£o aplique Despacho 100.2 Recurso conhecido e provido por v√≠cio de julgamento. Anulado indeferimento para retorno dos autos √† 1¬™ Inst√¢ncia para a continua√ß√£o do exame t√©cnico.

No caso de n√£o haver v√≠cios de julgamento ou mesmo se houve v√≠cio de julgamento, mas este n√£o causou preju√≠zo ao requerente siga para a terceira etapa que √© a an√°lise sobre a possibilidade de modifica√ß√µes do pedido. Se o examinador de recurso entende que √© poss√≠vel contornar os √≥bices do indeferimento, verifique se existe um novo QR apresentado no recurso. Se n√£o houve QR novo ou se houve um QR novo mas que traz elementos do relat√≥rio descritivo ou mesmo se este QR novo necessita de emendas ent√£o o examinador devefazer uma exig√™ncia t√©cnica despacho 121 segundo os Modelos 6 ou Modelo 10. Se o QR resolve os √≥bices do indeferimento na condi√ß√£o em que foi apresentado sem necessidade de emendas ent√£o avalie se √© poss√≠vel aplicar o princ√≠pio da causa madura, ou seja, todas as demais quest√µes de patenteabilidade foram observadas no indeferimento. Neste caso aplica-se o modelo 5 e o despacho 100.5 Recurso conhecido e provido devido a modifica√ß√£o no pedido. Anulado indeferimento para retorno dos autos √† 1¬™ Inst√¢ncia para a continua√ß√£o do exame t√©cnico. Se n√£o for o caso de aplica√ß√£o de causa madura, ou seja, h√° quest√µes de patenteabilidade ainda n√£o examinadas ent√£o aplica-se o Modelo 4 e despacho 100.4 Recurso conhecido e provido devido a modifica√ß√£o no pedido. Reformada a decis√£o recorrida e deferido o pedido.

Se n√£o h√° solu√ß√£o para os √≥bices apresentados no indeferimento, n√£o cabe recurso negado (111), o examinador, neste caso, necessariamente deve fazer uma exig√™ncia t√©cnica (121).

"""


# T√≠tulo da p√°gina
st.title('BatePapo üí¨')

# Introdu√ß√£o do assistente virtual
st.write("A Assistente Virtual Sophia est√° aqui para te ajudar a tirar suas d√∫vidas sobre o processamento de recursos de paedidos de patente! Atualmente o assistente tem informa√ß√µes mais comuns j√° cadastradas. Vamos come√ßar?")

#model = genai.GenerativeModel("gemini-pro") # teste
#response = model.generate_content("O que √© uma patente ?")
#st.write(response.text)
#sys.exit(0)

# Inicializa o modelo generativo
model = genai.GenerativeModel(
  model_name="gemini-1.5-pro-latest",
  system_instruction=system_instruction
)

# Mensagem inicial do modelo
initial_model_message = "Ol√°, eu sou Sophia, um assistente virtual que te ajuda a tirar suas d√∫vidas sobre o processamento de recursos de pedidos de patente. Como voc√™ se chama?"

# Inicializa a conversa do assistente virtual
if "chat_encontra" not in st.session_state:
    st.session_state.chat_encontra = model.start_chat(history=[{'role':'model', 'parts': [initial_model_message]}])

# Exibe o hist√≥rico de conversa
for i, message in enumerate(st.session_state.chat_encontra.history):
  if message.role == "user":
    with st.chat_message("user"):
      st.markdown(message.parts[0].text)
  else:
    with st.chat_message("assistant"):
      st.markdown(message.parts[0].text)

# Entrada do usu√°rio
user_query = st.chat_input('Voc√™ pode falar ou digitar sua resposta aqui:')

# Processamento da entrada do usu√°rio e resposta do assistente
if user_query is not None and user_query != '':
    with st.chat_message("user"):
      st.markdown(user_query)
    with st.chat_message("assistant"):
        ai_query = st.session_state.chat_encontra.send_message(user_query).text
        st.markdown(ai_query)
